{"version":3,"sources":["webpack:///bundle.min.js","webpack:///webpack/bootstrap f70be555dc42228780c8","webpack:///./script.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","myapp","angular","service","planets","this","populatePlanets","results","map","planet","residents","resident","url","match","getPlanets","characters","getCharacter","key","saveCharacter","person","charId","getAll","controller","$scope","$http","$stateParams","characterService","nextChar","Number","character","get","then","resp","data","planetService","length","error","console","status","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,UAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,UAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/BA,EAAoB,GACpBI,EAAOD,QAAUH,EAAoB,IAKhC,SAASI,EAAQD,GEpDvB,YAEA,IAAAQ,GAAAC,QAAAR,OAAA,sBAEAO,GAAAE,QAAA,2BACA,GAAAC,KACAC,MAAAC,gBAAA,SAAAC,GACAH,EAAAG,EAAAC,IAAA,SAAAC,GAMA,MALAA,GAAAC,UAAAD,EAAAC,UAAAF,IAAA,SAAAG,GACA,GAAAA,IAAwBC,IAAAD,EAExB,OADAA,GAAAhB,GAAAgB,EAAAC,IAAAC,MAAA,UACAF,IAEAF,KAGAJ,KAAAS,WAAA,WACA,MAAAV,MAIAH,EAAAE,QAAA,8BACA,GAAAY,KACAV,MAAAW,aAAA,SAAAC,GACA,MAAAF,GAAAE,IAGAZ,KAAAa,cAAA,SAAAC,EAAAxB,GACA,GAAAyB,GAAAzB,CAEAoB,GAAAK,GAAAD,GAEAd,KAAAgB,OAAA,WACA,MAAAN,MAIAd,EAAAqB,WAAA,4EAAAC,EAAAC,EAAAC,EAAAC,GACAH,EAAAI,SAAAC,OAAAH,EAAA9B,IAAA,EACA+B,EAAAV,aAAAS,EAAA9B,IACA4B,EAAAM,UAAAH,EAAAV,aAAAS,EAAA9B,IAEA6B,EAAAM,IAAA,8BAAAL,EAAA9B,GAAA,iBAAAoC,KAAA,SAAAC,GACAN,EAAAR,cAAAc,EAAAC,KAAAR,EAAA9B,IACA4B,EAAAM,UAAAH,EAAAV,aAAAS,EAAA9B,SAMAM,EAAAqB,WAAA,2EAAAC,EAAAC,EAAAU,EAAAR,GACA,IAAAQ,EAAApB,aAAAqB,OACAX,EAAAM,IAAA,4CAAAC,KAAA,SAAAC,GACAE,EAAA5B,gBAAA0B,EAAAC,KAAA1B,SACAgB,EAAAnB,QAAA8B,EAAApB,eAFAU,SAIK,SAAAY,GACLC,QAAAD,QAAAE,WAGAf,EAAAR,WAAAW,EAAAL,SACAE,EAAAnB,QAAA8B,EAAApB,iBAIAb,EAAAsC,QAAA,+CAAAC,EAAAC,GAEAA,EAAAC,UAAA,YAEAF,EACAG,MAAA,WACA/B,IAAA,WACAgC,YAAA,eACAtB,WAAA,eAEAqB,MAAA,YACA/B,IAAA,gBACAgC,YAAA,gBACAtB,WAAA","file":"bundle.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(1);\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar myapp = angular.module('myapp', [\"ui.router\"]);\n\t\n\tmyapp.service('planetService', function (){\n\t  var planets = [];\n\t  this.populatePlanets = function (results){\n\t    planets = results.map(function(planet) {\n\t      planet.residents = planet.residents.map(function(resident) {\n\t        var resident = { url: resident };\n\t        resident.id = resident.url.match(/\\d+/)[0];\n\t        return resident;\n\t      });\n\t    return planet;\n\t    });\n\t  };\n\t  this.getPlanets = function (){\n\t    return planets;\n\t  }\n\t});\n\t\n\tmyapp.service('characterService', function (){\n\t  var characters = {};\n\t  this.getCharacter = function (key){\n\t    return characters[key];\n\t    console.log(characters[key]);\n\t  }\n\t  this.saveCharacter = function (person, id){\n\t    var charId = id;\n\t    //person.Id = id; \n\t    characters[charId]=person;\n\t  }\n\t  this.getAll = function (){\n\t    return characters;\n\t  }\n\t})\n\t\n\tmyapp.controller(\"ResidentCtrl\", ['$scope', '$http', '$stateParams', 'characterService', function($scope, $http, $stateParams, characterService) {\n\t  $scope.nextChar = Number($stateParams.id)+1;\n\t  if(characterService.getCharacter($stateParams.id)){\n\t    $scope.character = characterService.getCharacter($stateParams.id);\n\t  }else{\n\t    $http.get(\"http://swapi.co/api/people/\" + $stateParams.id + \"/?format=json\").then(function(resp) {\n\t        characterService.saveCharacter(resp.data, $stateParams.id);\n\t        $scope.character = characterService.getCharacter($stateParams.id);\n\t    });\n\t  }\n\t\n\t}])\n\t\n\tmyapp.controller(\"PlanetCtrl\", ['$scope','$http', 'planetService', 'characterService',function($scope, $http, planetService, characterService) {\n\t  if (planetService.getPlanets().length===0){\n\t    $http.get(\"http://swapi.co/api/planets/?format=json\").then(function(resp) {\n\t      planetService.populatePlanets(resp.data.results);\n\t      $scope.planets = planetService.getPlanets();\n\t\n\t    }).catch(function(error){\n\t      console.error(error.status);\n\t    }); \n\t  }else{\n\t    $scope.characters = characterService.getAll();\n\t    $scope.planets = planetService.getPlanets();\n\t  }\n\t}]);\n\t\n\tmyapp.config(['$stateProvider','$urlRouterProvider',function($stateProvider, $urlRouterProvider){\n\t\n\t  $urlRouterProvider.otherwise(\"/planets\")\n\t\n\t  $stateProvider\n\t    .state('planets', {\n\t        url: \"/planets\",\n\t        templateUrl: \"planets.html\",\n\t        controller: \"PlanetCtrl\"\n\t    })\n\t    .state('resident', {\n\t        url: \"/resident/:id\",\n\t        templateUrl: \"resident.html\",\n\t        controller: \"ResidentCtrl\"\n\t    })\n\t}])\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f70be555dc42228780c8\n **/","'use strict';\n\nvar myapp = angular.module('myapp', [\"ui.router\"]);\n\nmyapp.service('planetService', function (){\n  var planets = [];\n  this.populatePlanets = function (results){\n    planets = results.map(function(planet) {\n      planet.residents = planet.residents.map(function(resident) {\n        var resident = { url: resident };\n        resident.id = resident.url.match(/\\d+/)[0];\n        return resident;\n      });\n    return planet;\n    });\n  };\n  this.getPlanets = function (){\n    return planets;\n  }\n});\n\nmyapp.service('characterService', function (){\n  var characters = {};\n  this.getCharacter = function (key){\n    return characters[key];\n    console.log(characters[key]);\n  }\n  this.saveCharacter = function (person, id){\n    var charId = id;\n    //person.Id = id; \n    characters[charId]=person;\n  }\n  this.getAll = function (){\n    return characters;\n  }\n})\n\nmyapp.controller(\"ResidentCtrl\", ['$scope', '$http', '$stateParams', 'characterService', function($scope, $http, $stateParams, characterService) {\n  $scope.nextChar = Number($stateParams.id)+1;\n  if(characterService.getCharacter($stateParams.id)){\n    $scope.character = characterService.getCharacter($stateParams.id);\n  }else{\n    $http.get(\"http://swapi.co/api/people/\" + $stateParams.id + \"/?format=json\").then(function(resp) {\n        characterService.saveCharacter(resp.data, $stateParams.id);\n        $scope.character = characterService.getCharacter($stateParams.id);\n    });\n  }\n\n}])\n\nmyapp.controller(\"PlanetCtrl\", ['$scope','$http', 'planetService', 'characterService',function($scope, $http, planetService, characterService) {\n  if (planetService.getPlanets().length===0){\n    $http.get(\"http://swapi.co/api/planets/?format=json\").then(function(resp) {\n      planetService.populatePlanets(resp.data.results);\n      $scope.planets = planetService.getPlanets();\n\n    }).catch(function(error){\n      console.error(error.status);\n    }); \n  }else{\n    $scope.characters = characterService.getAll();\n    $scope.planets = planetService.getPlanets();\n  }\n}]);\n\nmyapp.config(['$stateProvider','$urlRouterProvider',function($stateProvider, $urlRouterProvider){\n\n  $urlRouterProvider.otherwise(\"/planets\")\n\n  $stateProvider\n    .state('planets', {\n        url: \"/planets\",\n        templateUrl: \"planets.html\",\n        controller: \"PlanetCtrl\"\n    })\n    .state('resident', {\n        url: \"/resident/:id\",\n        templateUrl: \"resident.html\",\n        controller: \"ResidentCtrl\"\n    })\n}])\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./script.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}